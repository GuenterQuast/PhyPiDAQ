@startuml


namespace Model {



 namespace Core {

	class MeasurementRun {

		+start(): boolean
		+pause(): boolean
		+resume(): boolean
		+reset(): boolean
		+setUpdateRate(MeasurementConfiguration config): boolean
		-checkSensorInChannelStates(): boolean

	}

	enum MesurementRunState{
		INITIAL_STATE
		RUNNING
		PAUSED
	}
	MeasurementRun -> MesurementRunState



	class MeasurementConfiguration{
		+MeasurementConfiguration(pathToFile: String, updateRate: double)
		-pathToFile: String
		-updateRate: double
		-createConfigId( id: String): long
		-cloneInitBlock(id: String): BuildingBlock
		+getPathToFile(): String
		-checkForCycle(): boolean
 		+getMeasurementConfig(): MeasurementConfiguration
 		+addBuildingBlock(id: String)
		+removeBuildingBlock(initId: String, configId: long)
		+addConnection(firstChannelId: String, secondChannelId: String)
		+removeConnection(firstChannelId: String, secondChannelId: String)

 		+createModelFromYamlDom(modelDom: YamlDom): String

	}
	MeasurementConfiguration "1" -left- "*" MeasurementRun


	abstract class BuildingBlock
	{

		-initId: String
		-configId: long
		-name: String
		+setconfigId(configId):boolean
		+addInChannel(id: String, name: String): void
		+addOutChannel(id: String, name: String): void
		+removeInChannel(id: String, name: String): void
		+removeOutChannel(id: String, name: String): void



	}


	MeasurementConfiguration "1" -- "*" BuildingBlock

	class HelpMessage{
		- messageFileName : String
		+ HelpMessage(msgFile : String)
		+ displayMessage() : void
	}
	note left of HelpMessage : "messageFileName" leads to [html/markdown/?] \nfile containing message text, \nwhich can be displayed by the application \n(e.g. in swt browser widget)

	BuildingBlock "*" --> "1" HelpMessage : < provides help/information about




	class YamlRepresentation {
		{static} makeYamlRepresentation(block: BuildingBlock): YAML
	}
	BuildingBlock -left- YamlRepresentation

	class BuildingBlockDirectory {

- isUpdated: boolean
- InitHashMap: HashMap<String: id, block: BuildingBlock>
- ConfigHashMap: HashMap<int: id, block: BuildingBlock>
--
+ addInitBuildingBlock(id: String, block: BuildingBlock): boolean
..
+ addConfigBuildingBlock(id: int, block: BuildingBlock): boolean
+ removeConfigBuildingBlock(id: String): boolean
+ getInitBuildingBlock(id: String): BuildingBlock
+ getConfigBuildingBlock(id: int): BuildingBlock
+ getFullInitBlock(): HashMap<InitId: String, block: BuildingBlock>
+ getFullConfigBlock(): HashMap<ConfigId: int, block: BuildingBlock>
+ addConfigConnection(bbId1: String, chId1: int, chId2: int, bbId2: String): boolean
+ removeConfigConnection(bbId1: String, chId1: int, chId2: int, bbId2: String): boolean
+ getConnection(chId1: int, chId2: int): boolean
+ setUpdate(bool: boolean): boolean
+ checkUpdate(): boolean
}
	MeasurementConfiguration  --> BuildingBlockDirectory
}




	namespace TransformationLogic {
		abstract class Transformation {
			+<<create>> Transformation()
			+<<create>> Transformation(Yaml inputTransformationYaml)
			+setFunction(String inputFunction)
			+{abstract} applyFunction(packet: TimeSpampValuePair): void
			{abstract} processValue(packet: TimeSpampValuePair): boolean
		}
		class Function {
			<<create>>Function(String inputFunction) : Function
			+applyFunction(packet: TimeSpampValuePair): void

		}
		Function "1" - "*" Transformation
	}


	Model.Core.BuildingBlock <|-  Model.TransformationLogic.Transformation


	namespace RepresentationLogic {

		abstract class Representation{

			{abstract} processValue(packet: TimeSpampValuePair): boolean


			}

		class "TableRespresentation" as TR{
			processValue(packet: TimeSpampValuePair): boolean

		}


		class XYRepresentation {
			processValue(packet: TimeSpampValuePair): boolean
			traceName: String
			title: String
			xAxisName: String
			yAXisName: String
			hasToolBar: boolean


		}

		note bottom of  Model.RepresentationLogic.XYRepresentation
	  		use eclipse nebula
	  		for display
		end note
		XYRepresentation --|> Representation
		TR   --|> Representation


	}
	Model.Core.BuildingBlock <|--  Model.RepresentationLogic.Representation

	namespace SensorLogic {

		abstract class Sensor{
			{abstract} processValue(packet: TimeSpampValuePair): boolean

			}

		 class PhysicalSensor{
		 	processValue(packet: TimeSpampValuePair): boolean
		 }
		 class VirtualSensor{
		 	processValue(packet: TimeSpampValuePair): boolean
		 }
		 VirtualSensor --|> Sensor
		 PhysicalSensor --|> Sensor
	}
	Model.Core.BuildingBlock <|-- Model.SensorLogic.Sensor


	namespace ChannelLogic {

	class Channel {
		-id: String
		-value: long
		+ establishConnection(targetChannelId: String)
		+ receiveValue():void
		+ connect(): void
		+ unConnect(): void
		+ eraseValue(): void
		+ {abstract} forwardValue(): void

	}


	note top of Channel
	  first part of channelId is
	  the corresponding buildingBlockId
	end note

	abstract class ChannelState {
		+ {abstract} establishConnection(targetChannelId: String)
		+ {abstract} receiveValue()
	}
	Channel --> ChannelState
	note right of ChannelState
	  Schablonenmethode um Unterschiede zwischen
	  In und Out Channeln zu überbrücken
	end note
	class Connected{
		+ establishConnection(targetChannelId: String)
		+ receiveValue()
	}
	Connected --|> ChannelState
	class UnConnected{
		+ establishConnection(targetChannelId: String)
		+ receiveValue()
	}
	UnConnected --|> ChannelState
	class ValueReady{
		+ establishConnection(targetChannelId: String)
		+ receiveValue()
	}
	ValueReady --|> ChannelState
	class InChannel{
		-varName: String
		+forwardValue(): void
	}

	InChannel --|> Channel

	class OutChannel{
		-channelName: String
		+forwardValue(): void
	}


	OutChannel --|> Channel
	OutChannel "1" -- "1" InChannel
	note right of OutChannel
	  forwardValue wird bei
	  receive Value aufgerufen.
	  Hier ausimplementiert.
	end note

	note left of OutChannel
	  channelName steht für Funktionsnamen
	   bei Trafos und für
	   Channelname bei Sensoren
	end note
}

Model.Core.BuildingBlock "1" --> "*" Model.ChannelLogic.InChannel
Model.Core.BuildingBlock "1" --> "*" Model.ChannelLogic.OutChannel







'---------------------------------------------------------
'BuildingBlockBuilder
'---------------------------------------------------------
namespace BuildingBlockBuilder {
	class Director {

		+createSensorFromYaml(sensorFile: Yaml): Sensor
		+constructXYRepresentation()
		+constructNTimeRepresentation()
		+constructDS18B20TemperatureSensor()
		+constructBMPx80PressureSensor()
		+constructINA219CurrentAndVoltageSensor()
		+constructMMA8451Accelerometer()
		+constructTransformation()


	}

	class Builder {
		-linkToYaml: String
		+{abstract} fetchBuildingBlock(): BuildingBlock
		+snakeYaml.load(): hashMap
	}


	class "java.util.HashMap<K,V>" as HM{


	}

	Builder "1" --> "1" HM


	class SnakeYamlParser {
		+<<static>>parseYamlFile(Yaml fileToBeParsed): hashMap

	}

	note right of SnakeYamlParser
	  Already existing
	  parser for yaml files.
	end note


	SnakeYamlParser "1" --> "1" HM

	class SensorBuilder {
		+fetchBuildingBlock(): BuildingBlock
	}

	class PhysicalSensorBuilder {
		+fetchBuildingBlock(): BuildingBlock
		+addSensorProducerName(yaml Yaml): void

	}

	class VirtualSensorBuilder {
		+fetchBuildingBlock(): BuildingBlock
	}


	class TransformationBuilder {
		+fetchBuildingBlock(): BuildingBlock

	}
	class RepresentationBuilder {
		+fetchBuildingBlock(): BuildingBlock

	}
	class XYRepresentationBuilder {
		+fetchBuildingBlock(): BuildingBlock

	}
	class TableRepresentationBuilder {
		+fetchBuildingBlock(): BuildingBlock

	}
	SensorBuilder -up-|> Builder
	PhysicalSensorBuilder -up-|> SensorBuilder
	VirtualSensorBuilder -up-|> SensorBuilder

	TransformationBuilder -up-|> Builder
	RepresentationBuilder -up-|> Builder


	TableRepresentationBuilder -up-|> RepresentationBuilder
	XYRepresentationBuilder -up-|> RepresentationBuilder


	Director "1" --> "0..*" Builder : Staff

}


Model.BuildingBlockBuilder.TableRepresentationBuilder ..> Model.RepresentationLogic.TR
Model.BuildingBlockBuilder.SensorBuilder ..> Model.SensorLogic.Sensor
Model.BuildingBlockBuilder.TransformationBuilder ..> Model.TransformationLogic.Transformation
Model.BuildingBlockBuilder.RepresentationBuilder ..> Model.RepresentationLogic.Representation
Model.BuildingBlockBuilder.VirtualSensorBuilder ..> Model.SensorLogic.VirtualSensor
Model.BuildingBlockBuilder.PhysicalSensorBuilder ..> Model.SensorLogic.PhysicalSensor
Model.BuildingBlockBuilder.XYRepresentationBuilder ..> Model.RepresentationLogic.XYRepresentation

Model.Core.BuildingBlockDirectory "1" --> "1" Model.BuildingBlockBuilder.Director
Model.Core.MeasurementConfiguration "1" --> "1" Model.BuildingBlockBuilder.Director




namespace FacadeControllerView {

class PickUpPointViewFacades {
	 + getUpdateInterfaces(): UpdateInterface[]
	 + getGraphicDataIolnterface(): GraphicDataIolnterface
	 + getExceptionInterface(): ExceptionInterface
	 + getMeasurementDataInterface(): DataInterface
 }

 interface UpdateInterface {
 	+ updateConfig(): void
 }


 interface ExceptionInterface {
	 + showGeneralException(title: String, description: String): void
	 + showBuildingBlockException(id: String, title: String, description: String): void
	 + showConnectionException(id: long, title: String, description: String): void
 }

 interface MeasurementDataInterface {
 	+ pushShellForVisualisation(..): void
 }

PickUpPointViewFacades --> "*" UpdateInterface
PickUpPointViewFacades --> ExceptionInterface
PickUpPointViewFacades --> MeasurementDataInterface


}
Model.FacadeControllerView.PickUpPointViewFacades -- Model.BuildingBlockBuilder.Director
Model.FacadeControllerView.PickUpPointViewFacades -- Model.RepresentationLogic.XYRepresentation
Model.FacadeControllerView.PickUpPointViewFacades -- Model.Core.MeasurementConfiguration
Model.FacadeControllerView.PickUpPointViewFacades -- Model.Core.MeasurementRun


class Model.MRunReaction {
	+justWaiting():  void
	+indicateError(inChannelId: String, errorCode: double)
	+indicateTimeout(): void
	+indicateConnectionTerminated(): void
	+dispatchCompletePacketSet(completePacketSet: EnhancedValuePacket[])
}

class MRunInfo {
	+getAllInChannelIds(): String[]
	+getErrorCodes(inChannelId: String): double[]
	+getTimeoutOption(): long
	}



MRunReaction  --  Model.Core.MeasurementRun
Model.Core.MeasurementRun  --  Model.MRunInfo


class ModelManager {
		+initializeModel():boolean
		-createNewMeasurementConfiguration():MeasurementConfiguration
		-createTransformationPrototypesFromYaml():boolean
		-createRepresentationPrototypesFromYaml():boolean
		-fetchSensorPrototypesFromBackedn():boolean
		-pushNetworkConfigToBackend(path: String):boolean
	}

Model.ModelManager "1" -- "1" Model.BuildingBlockBuilder.Director: uses >
Model.ModelManager "1" -- "1" Model.Core.MeasurementConfiguration : creates >


}
@enduml


class hidd {

}
hide Model.hidd


Model.Core.BuildingBlockDirectory -up[hidden]- Model.hidd
Model.BuildingBlockBuilder -up[hidden]- Model.Core.BuildingBlockDirectory
Model.ChannelLogic -up[hidden]--------- Model.BuildingBlockBuilder













old interfaces to 




















Brainstorming:

NachIMeasurement










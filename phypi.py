#!/usr/bin/python3
# -*- coding: utf-8 -*-
# script CosmoGui.py
from __future__ import print_function, division, unicode_literals
from __future__ import absolute_import

''' 
  A GUI to control run_phipy.py 

    - select and edit configuration files 
    - select working direcotory
    - start data taking via execution of run_phypi.py
'''

import sys, os, time, yaml, threading, subprocess

# --> Code generated by desitner-qt5

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_PhyPi(object):
    def setupUi(self, PhyPi):
        PhyPi.setObjectName("PhyPi")
        PhyPi.resize(715, 595)
        self.centralwidget = QtWidgets.QWidget(PhyPi)
        self.centralwidget.setObjectName("centralwidget")
        self.PhyPiDAQ = QtWidgets.QTabWidget(self.centralwidget)
        self.PhyPiDAQ.setGeometry(QtCore.QRect(1, 1, 711, 591))
        self.PhyPiDAQ.setStatusTip("")
        self.PhyPiDAQ.setObjectName("PhyPiDAQ")
        self.Tab_Control = QtWidgets.QWidget()
        self.Tab_Control.setWhatsThis("")
        self.Tab_Control.setObjectName("Tab_Control")
        self.label_Picture = QtWidgets.QLabel(self.Tab_Control)
        self.label_Picture.setGeometry(QtCore.QRect(50, 60, 90, 70))
        self.label_Picture.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label_Picture.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_Picture.setText("")
        self.label_Picture.setPixmap(QtGui.QPixmap("images/PhiPiLogo.png"))
        self.label_Picture.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Picture.setObjectName("label_Picture")
        self.label_caption = QtWidgets.QLabel(self.Tab_Control)
        self.label_caption.setGeometry(QtCore.QRect(170, 150, 360, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_caption.setFont(font)
        self.label_caption.setObjectName("label_caption")
        self.label_DAQconfig = QtWidgets.QLabel(self.Tab_Control)
        self.label_DAQconfig.setGeometry(QtCore.QRect(60, 360, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Latin Modern Sans")
        font.setPointSize(11)
        self.label_DAQconfig.setFont(font)
        self.label_DAQconfig.setTextFormat(QtCore.Qt.PlainText)
        self.label_DAQconfig.setObjectName("label_DAQconfig")
        self.lE_DAQConfFile = QtWidgets.QLineEdit(self.Tab_Control)
        self.lE_DAQConfFile.setGeometry(QtCore.QRect(160, 360, 371, 32))
        self.lE_DAQConfFile.setText("")
        self.lE_DAQConfFile.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lE_DAQConfFile.setReadOnly(True)
        self.lE_DAQConfFile.setObjectName("lE_DAQConfFile")
        self.label = QtWidgets.QLabel(self.Tab_Control)
        self.label.setGeometry(QtCore.QRect(230, 465, 60, 30))
        font = QtGui.QFont()
        font.setFamily("Latin Modern Sans")
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setTextFormat(QtCore.Qt.PlainText)
        self.label.setObjectName("label")
        self.lE_RunTag = QtWidgets.QLineEdit(self.Tab_Control)
        self.lE_RunTag.setGeometry(QtCore.QRect(300, 466, 113, 31))
        self.lE_RunTag.setObjectName("lE_RunTag")
        self.pB_StartRun = QtWidgets.QPushButton(self.Tab_Control)
        self.pB_StartRun.setGeometry(QtCore.QRect(600, 500, 101, 40))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/start.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_StartRun.setIcon(icon)
        self.pB_StartRun.setIconSize(QtCore.QSize(24, 24))
        self.pB_StartRun.setObjectName("pB_StartRun")
        self.pB_FileSelect = QtWidgets.QPushButton(self.Tab_Control)
        self.pB_FileSelect.setGeometry(QtCore.QRect(540, 360, 31, 34))
        self.pB_FileSelect.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/open-folder.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_FileSelect.setIcon(icon1)
        self.pB_FileSelect.setObjectName("pB_FileSelect")
        self.pB_abort = QtWidgets.QPushButton(self.Tab_Control)
        self.pB_abort.setGeometry(QtCore.QRect(660, 0, 41, 41))
        self.pB_abort.setAccessibleDescription("")
        self.pB_abort.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/application-exit.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_abort.setIcon(icon2)
        self.pB_abort.setIconSize(QtCore.QSize(20, 20))
        self.pB_abort.setAutoDefault(False)
        self.pB_abort.setObjectName("pB_abort")
        self.lE_WorkDir = QtWidgets.QLineEdit(self.Tab_Control)
        self.lE_WorkDir.setGeometry(QtCore.QRect(160, 410, 371, 32))
        self.lE_WorkDir.setReadOnly(True)
        self.lE_WorkDir.setObjectName("lE_WorkDir")
        self.label_WorkDir = QtWidgets.QLabel(self.Tab_Control)
        self.label_WorkDir.setGeometry(QtCore.QRect(70, 413, 81, 20))
        font = QtGui.QFont()
        font.setFamily("Latin Modern Sans")
        font.setPointSize(11)
        self.label_WorkDir.setFont(font)
        self.label_WorkDir.setObjectName("label_WorkDir")
        self.pB_WDselect = QtWidgets.QPushButton(self.Tab_Control)
        self.pB_WDselect.setGeometry(QtCore.QRect(540, 410, 31, 34))
        self.pB_WDselect.setText("")
        self.pB_WDselect.setIcon(icon1)
        self.pB_WDselect.setObjectName("pB_WDselect")
        self.PhyPiDAQ.addTab(self.Tab_Control, "")
        self.Tab_Config = QtWidgets.QWidget()
        self.Tab_Config.setObjectName("Tab_Config")
        self.tabConfig = QtWidgets.QTabWidget(self.Tab_Config)
        self.tabConfig.setEnabled(True)
        self.tabConfig.setGeometry(QtCore.QRect(10, 10, 821, 501))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabConfig.sizePolicy().hasHeightForWidth())
        self.tabConfig.setSizePolicy(sizePolicy)
        self.tabConfig.setMinimumSize(QtCore.QSize(811, 0))
        self.tabConfig.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabConfig.setObjectName("tabConfig")
        self.tab_phypiConfig = QtWidgets.QWidget()
        self.tab_phypiConfig.setObjectName("tab_phypiConfig")
        self.pTE_phypiConfig = QtWidgets.QPlainTextEdit(self.tab_phypiConfig)
        self.pTE_phypiConfig.setGeometry(QtCore.QRect(0, 10, 681, 411))
        self.pTE_phypiConfig.setReadOnly(True)
        self.pTE_phypiConfig.setObjectName("pTE_phypiConfig")
        self.pB_acceptDAQconfig = QtWidgets.QPushButton(self.tab_phypiConfig)
        self.pB_acceptDAQconfig.setGeometry(QtCore.QRect(600, 426, 88, 30))
        self.pB_acceptDAQconfig.setObjectName("pB_acceptDAQconfig")
        self.tabConfig.addTab(self.tab_phypiConfig, "")
        self.tab_DeviceConfig = QtWidgets.QWidget()
        self.tab_DeviceConfig.setObjectName("tab_DeviceConfig")
        self.pTE_DeviceConfig = QtWidgets.QPlainTextEdit(self.tab_DeviceConfig)
        self.pTE_DeviceConfig.setGeometry(QtCore.QRect(0, 10, 681, 411))
        self.pTE_DeviceConfig.setObjectName("pTE_DeviceConfig")
        self.pB_DeviceSelect = QtWidgets.QPushButton(self.tab_DeviceConfig)
        self.pB_DeviceSelect.setGeometry(QtCore.QRect(490, 423, 181, 34))
        self.pB_DeviceSelect.setIcon(icon1)
        self.pB_DeviceSelect.setObjectName("pB_DeviceSelect")
        self.tabConfig.addTab(self.tab_DeviceConfig, "")
        self.rB_EditMode = QtWidgets.QRadioButton(self.Tab_Config)
        self.rB_EditMode.setGeometry(QtCore.QRect(600, 15, 91, 30))
        self.rB_EditMode.setObjectName("rB_EditMode")
        self.pB_SaveDefault = QtWidgets.QPushButton(self.Tab_Config)
        self.pB_SaveDefault.setGeometry(QtCore.QRect(290, 514, 141, 34))
        self.pB_SaveDefault.setObjectName("pB_SaveDefault")
        self.PhyPiDAQ.addTab(self.Tab_Config, "")
        self.Tab_Help = QtWidgets.QWidget()
        self.Tab_Help.setObjectName("Tab_Help")
        self.TE_Help = QtWidgets.QTextEdit(self.Tab_Help)
        self.TE_Help.setGeometry(QtCore.QRect(10, 30, 521, 481))
        self.TE_Help.setUndoRedoEnabled(False)
        self.TE_Help.setReadOnly(True)
        self.TE_Help.setPlaceholderText("")
        self.TE_Help.setObjectName("TE_Help")
        self.pB_Help = QtWidgets.QPushButton(self.Tab_Help)
        self.pB_Help.setGeometry(QtCore.QRect(10, 0, 88, 31))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/flagUK.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_Help.setIcon(icon3)
        self.pB_Help.setObjectName("pB_Help")
        self.pB_Hilfe = QtWidgets.QPushButton(self.Tab_Help)
        self.pB_Hilfe.setGeometry(QtCore.QRect(110, 0, 88, 31))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/flagDE.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pB_Hilfe.setIcon(icon4)
        self.pB_Hilfe.setObjectName("pB_Hilfe")
        self.PhyPiDAQ.addTab(self.Tab_Help, "")
        PhyPi.setCentralWidget(self.centralwidget)

        self.retranslateUi(PhyPi)
        self.PhyPiDAQ.setCurrentIndex(0)
        self.tabConfig.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(PhyPi)

    def retranslateUi(self, PhyPi):
        _translate = QtCore.QCoreApplication.translate
        PhyPi.setWindowTitle(_translate("PhyPi", "PhyPiDAQ"))
        self.PhyPiDAQ.setToolTip(_translate("PhyPi", "<html><head/><body><p>Output  / Configuration / Help</p></body></html>"))
        self.Tab_Control.setToolTip(_translate("PhyPi", "<html><head/><body><p>Control Panel</p></body></html>"))
        self.label_Picture.setToolTip(_translate("PhyPi", "PhyPi Data Aquitision with Raspberry Pi"))
        self.label_caption.setText(_translate("PhyPi", "Data Acquisition for Physics with Raspberry Pi"))
        self.label_DAQconfig.setText(_translate("PhyPi", "DAQ config:"))
        self.lE_DAQConfFile.setToolTip(_translate("PhyPi", "<html><head/><body><p>DAQ configuration file (type .daq)</p></body></html>"))
        self.label.setText(_translate("PhyPi", "Run Tag:"))
        self.lE_RunTag.setToolTip(_translate("PhyPi", "<html><head/><body><p>Name for the run</p></body></html>"))
        self.lE_RunTag.setText(_translate("PhyPi", "phypi"))
        self.pB_StartRun.setToolTip(_translate("PhyPi", "<html><head/><body><p>Start Data Acquisition</p></body></html>"))
        self.pB_StartRun.setText(_translate("PhyPi", "  StartRun"))
        self.pB_FileSelect.setToolTip(_translate("PhyPi", "<html><head/><body><p>selecd daq configuration file</p></body></html>"))
        self.pB_abort.setToolTip(_translate("PhyPi", "<html><head/><body><p>Exit PhyPi Gui</p></body></html>"))
        self.label_WorkDir.setText(_translate("PhyPi", "Work Dir:"))
        self.pB_WDselect.setToolTip(_translate("PhyPi", "<html><head/><body><p>select working directory (where ouput is stored)</p></body></html>"))
        self.PhyPiDAQ.setTabText(self.PhyPiDAQ.indexOf(self.Tab_Control), _translate("PhyPi", "Control"))
        self.Tab_Config.setToolTip(_translate("PhyPi", "<html><head/><body><p>Config Panel</p></body></html>"))
        self.tabConfig.setToolTip(_translate("PhyPi", "<html><head/><body><p>Configuration Files</p></body></html>"))
        self.pTE_phypiConfig.setToolTip(_translate("PhyPi", "<html><head/><body><p>Comnfiguration File for Oscilloscope</p></body></html>"))
        self.pB_acceptDAQconfig.setToolTip(_translate("PhyPi", "accept changes"))
        self.pB_acceptDAQconfig.setText(_translate("PhyPi", "reload all"))
        self.tabConfig.setTabText(self.tabConfig.indexOf(self.tab_phypiConfig), _translate("PhyPi", "phypi Config"))
        self.pB_DeviceSelect.setText(_translate("PhyPi", "   load Device Config"))
        self.tabConfig.setTabText(self.tabConfig.indexOf(self.tab_DeviceConfig), _translate("PhyPi", "Device Config"))
        self.rB_EditMode.setText(_translate("PhyPi", "Edit Mode"))
        self.pB_SaveDefault.setToolTip(_translate("PhyPi", "Save as default configuration"))
        self.pB_SaveDefault.setText(_translate("PhyPi", "Save Config"))
        self.PhyPiDAQ.setTabText(self.PhyPiDAQ.indexOf(self.Tab_Config), _translate("PhyPi", "Configuration"))
        self.Tab_Help.setToolTip(_translate("PhyPi", "<html><head/><body><p>Info &amp; Help</p></body></html>"))
        self.pB_Help.setText(_translate("PhyPi", "English"))
        self.pB_Hilfe.setText(_translate("PhyPi", "Deutsch"))
        self.PhyPiDAQ.setTabText(self.PhyPiDAQ.indexOf(self.Tab_Help), _translate("PhyPi", "Help / Hilfe"))



# <-- end of  code generated by desitner-qt5


# --> implementation starts here --> 

        self.Window = PhyPi

# set help 
        self.setHelp_EN()

# set font for plainTextEdit to monospace
        monofont = QtGui.QFont()
        monofont.setStyleHint(QtGui.QFont.TypeWriter)
        monofont.setFamily("unexistentfont")        
        self.pTE_phypiConfig.setFont(monofont)
        self.pTE_DeviceConfig.setFont(monofont)

# find user home directory and create directory 'PhyPi' 
        self.homedir = os.getenv('HOME')
        self.ConfDir = self.homedir + '/PhyPi' 
        if not os.path.exists(self.ConfDir): 
          os.makedirs(self.ConfDir)

# set initial working Directory
        self.WDname = self.ConfDir 
        self.lE_WorkDir.setText(self.WDname)

# define actions
        self.pB_abort.clicked.connect(QtCore.QCoreApplication.instance().quit) 
        self.rB_EditMode.clicked.connect(self.actionEditConfig) 
        self.pB_acceptDAQconfig.clicked.connect(self.readDeviceConfig)
        self.pB_SaveDefault.clicked.connect(self.saveDefaultConfig)
        self.pB_FileSelect.clicked.connect(self.selectConfigFile)
        self.pB_DeviceSelect.clicked.connect(self.selectDeviceFile)
        self.pB_WDselect.clicked.connect(self.selectWD)
        self.pB_Help.clicked.connect(self.setHelp_EN)
        self.pB_Hilfe.clicked.connect(self.setHelp_DE)
        self.pB_StartRun.clicked.connect(self.actionStartRun) 

    def setHelp_DE(self):
      self.TE_Help.setText(open('doc/Hilfe.html', 'r').read() ) 

    def setHelp_EN(self):
      self.TE_Help.setText(open('doc/help.html', 'r').read() )


    def setDevConfig_fromFile(self, fname):
      try:
        self.pTE_DeviceConfig.setPlainText(open(fname).read() )
        print('   - Device configuration from file ' + fname)
      except:
        self.pTE_DeviceConfig.setPlainText('# no config file ' + fname )

    def readDeviceConfig(self):
#   read Device Configuration as specified by actual phypi DAQ config
      phypiConfD=yaml.load(self.pTE_phypiConfig.toPlainText() )
      if "DeviceFile" in phypiConfD: 
        DevFile = phypiConfD["DeviceFile"] # device configuration file
      elif "DAQModule" in phypiConfD: 
        DevFile = phypiConfD["DAQModule"] + '.yaml' # configuration file for DAQ device
      else:
        print('     no device configuration file given - exiting')
        exit(1)

      # (re-)read device config if file name in phypi Config changed
      if DevFile != self.DeviceFile:
        fname = self.cwd + '/' + DevFile
        self.setDevConfig_fromFile(fname)
        self.DeviceFile = DevFile

    def initDAQ(self, DAQconfFile):
      # initialize DAQ from config files - need absolute path

      self.DeviceFile = ''
      path = os.path.dirname(DAQconfFile)
      if path == '': path = '.'
      self.cwd = path

      try:
        with open(DAQconfFile, 'r') as f:
          DAQconf = f.read()
      except:
        print('     failed to read DAQ configuration file ' + DAQconfFile)
        exit(1)

      self.lE_DAQConfFile.setText(DAQconfFile)
      print('   - PhyPi configuration from file ' + DAQconfFile)
   # display config data in GUI
      self.pTE_phypiConfig.setPlainText(DAQconf)

      self.readDeviceConfig() # read device File as specified in DAQConfFile

# - end iniDAQ

    def selectConfigFile(self):
      path2File = QtWidgets.QFileDialog.getOpenFileName(None,
         'PhyPi config', './', 'DAQ(*.daq)')
      FileName = str(path2File[0]).strip()
      if FileName is not '' :
        # print('selected File ' + str(FileName) )
        self.initDAQ(FileName)

    def selectDeviceFile(self):
      path2File = QtWidgets.QFileDialog.getOpenFileName(None,
          'Device config', './', 'yaml(*.yaml)')
      FileName = str(path2File[0]).strip()
      if FileName is not '' :
        # print('selected File ' + str(FileName) )
        self.setDevConfig_fromFile(FileName)

    def selectWD(self):
      path2WD = QtWidgets.QFileDialog.getExistingDirectory(None, '~')
      WDname = str(path2WD).strip()
      if WDname is not '' :
        # print('selected Directory' + WDname )
         self.lE_WorkDir.setText(WDname)
         self.WDname = WDname

    def actionEditConfig(self):
        checked = self.rB_EditMode.isChecked()
        self.pTE_phypiConfig.setReadOnly(not checked)
        self.pTE_DeviceConfig.setReadOnly(not checked)

    def saveConfig(self, confdir):
      # save DAQ configuration in cdir
      RunTag = str(self.lE_RunTag.text() ).replace(' ','')
      # retrieve actual configuration from GUI
      DAQconf = self.pTE_phypiConfig.toPlainText() 
      self.DAQfile= RunTag + '.daq'
      fDAQ = open(confdir + '/' + self.DAQfile, 'w')
      print(DAQconf, file = fDAQ )
      fDAQ.close()     

      # save device config in subdirecotry config/
      DAQconfdict=yaml.load(DAQconf)       
      DevFile = DAQconfdict["DeviceFile"] 
      cdir, fnam = os.path.split(DevFile)
      # make sub-directory if needed an non-existent        
      if cdir != '':
        if not os.path.exists(confdir + '/' + cdir):
          os.makedirs(confdir + '/' + cdir) 
      fDev = open(confdir + '/' + DevFile, 'w')
      DevConf = self.pTE_DeviceConfig.toPlainText() 
      print(DevConf, file = fDev )
      fDev.close()

    def saveDefaultConfig(self):
      self.saveConfig(self.ConfDir)

    def actionStartRun(self):
      # start script run_phipy in subdirectory

      # generate a dedicated subdirectory
      datetime=time.strftime('%y%m%d-%H%M', time.localtime())
      RunTag = ''.join(str(self.lE_RunTag.text() ).split() )

      self.runDir = (RunTag + '_' + datetime) # timestamp
      if not os.path.exists(self.WDname + '/' + self.runDir): 
        os.makedirs(self.WDname + '/' + self.runDir)

      self.path_to_WD = self.WDname + '/' + self.runDir
      self.saveConfig(self.path_to_WD)
      print("   - files for this run stored in directory " + self.path_to_WD) 

    # close GUI window and start runCosmo 
      print('\n*==* PhyPi Gui: closing window and starting run_phypi.py')
      self.Window.close()

      # start script 
      self.start_runphypi()

      QtCore.QCoreApplication.instance().quit()
      print('*==* phypi: exit \n')

    def start_runphypi(self):
      dir = os.getcwd()
      subprocess.call([dir + '/run_phypi.py ' + self.DAQfile],
                 cwd = self.path_to_WD, shell = True)

# - end Class Ui_PhyPiWindow

if __name__ == "__main__": # - - - - - - - - - - - - - - - - - - - -

  script = sys.argv[0]
  print('\n*==* ' + script + ' running \n')

  # get relevant paths
  path_to_PhyPi = os.path.dirname(script)
  homedir = os.getenv('HOME')

# check for / read command line arguments
  # get DAQ configuration file
  if len(sys.argv)==2:
    DAQconfFile = os.path.abspath(sys.argv[1]) # with full path to file
    print (DAQconfFile)
  elif os.path.exists(homedir + '/PhyPi/phypi.daq'): 
    DAQconfFile = homedir + '/PhyPi/phypi.daq'
  else:
    DAQconfFile = 'default.daq'

# start GUI
  if path_to_PhyPi != '':
    os.chdir(path_to_PhyPi) # change path to where PhyPi lives
  app = QtWidgets.QApplication(sys.argv)
  MainWindow = QtWidgets.QMainWindow()
  ui = Ui_PhyPi()
  ui.setupUi(MainWindow)

  ui.initDAQ(DAQconfFile)


  MainWindow.show()
  sys.exit(app.exec_())
